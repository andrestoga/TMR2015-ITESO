/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// M A S T E R /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

#define BT_CONN 1
#define INBOX 1
#define OUTBOX 5

// MACROS
#define FSL \
SENSOR_1           // FSL = Floor Sensor Left
#define FSR \
SENSOR_2           // FSR = Floor Sensor Right
#define LSC \
SENSOR_3           // LSC = Light Sensor Central
#define CS \
S4                 // CS = Compass Sensor
#define STOP \
Off(OUT_ABC);\
Wait(500);         // STOP = Apaga los 3 motores + DELAY
#define FWD(v) \
OnRev(OUT_A,v+8);\
OnRev(OUT_B,v);    // FWD() = Avanza recto
#define REV(v) \
OnFwd(OUT_A,v+8);\
OnFwd(OUT_B,v);    // REV() = Retrocede recto
#define FWD_A(v) \
OnRev(OUT_A,v);    // FWD_A() = Avanza motor A
#define FWD_B(v) \
OnRev(OUT_B,v);    // FWD_B() = Avanza motor B
#define REV_A(v) \
OnFwd(OUT_A,v);    // REV_A() = Retrocede motor A
#define REV_B(v) \
OnFwd(OUT_B,v);    // REV_B() = Retrocede motor B
#define DELAY \
Wait(500);         // DELAY = Descansa por 500 ms

// CONSTANTES
#define PM 40      // PM    = Punto Medio (entre el umbral blanco y negro)
#define V  70      // V     = Velocidad de los pasos cortos
#define HUECO 40   // HUECO = Umbral donde ve una puerta ( hueco )
#define LIM 8      // LIM   = Límite de la canasta

// SUB_RUTINAS
sub conexion(int conn);                  // Inicia interfáz Bluetooth
sub subeHumanoidePendiente();            // Sube H pendiente
sub slaveSwitch();                       // Evalúa el mensaje del SLAVE
sub regresaBase();                       // Regresa a la base cuando está full
sub rutinaDeGiro(int aMenor, int aMayor);    // Gira hasta estar entro del rango recibido
sub inicializacion();                    // Fase donde sales de la zona de rescate
sub checkTapeError();                    // Verifica si se metió a la cinta de la puerta
sub runTime(int t);                      // Literalmente: Un temporizador

// VARIABLES
string out = "", in = "";
int    anguloInicial, anguloReal;
int    angulo = 0, anguloSig = 0;
int    canasta = 0;
int    nPared = 0;
int    TSR = 0, TSL = 0;
bool   pendiente = false;
bool   full = false;
bool   comienzaReg = false;
byte   fileHandle;
int    fileSize = 80000;
int    bytesWritten;
string text;
long   t0, tiempo;
long   t0_c, tiempo_c;
bool   error = false;
int    seg = 0;
bool   runningTime = false;
int    duracion;
int    robotAzul = true;
int    effort_A = 0;
int    effort_B = 0;


task move(){
    //inicializacion();
    comienzaReg = true;
    while(1){
         if(!error){
             ReceiveRemoteString(INBOX,true,in);
             slaveSwitch();
             if(TSR == 1 && TSL == 1){
                 rutinaDeGiro(65,68);
             }
             if(canasta == LIM){
                 PlaySound(1);
                 full = true;
                 regresaBase();
             }
         }else{
             STOP
             seg = 0;
             error = false;
             REV_B(80);
             Wait(500);
         }
    }
}

task errorManager(){
    while(1){
        effort_A = MotorTachoCount(OUT_A);
        effort_B = MotorTachoCount(OUT_B);
        if(effort_A != 0 || effort_B != 0){
            seg = 0;
        }
        if(seg >= 3){
           error = true;
           PlaySound(1);
        }
    }
}

task cronometro(){
    t0_c = CurrentTick();
    tiempo_c = CurrentTick()-t0_c;
    while(1){
        while(tiempo_c < (1000)){
              tiempo_c = CurrentTick()-t0_c;
        }
        t0_c = CurrentTick();
        tiempo_c = CurrentTick()-t0_c;
        seg++;
    }
}

task register(){
    DeleteFile("MAL_1.txt");
    DeleteFile("BIEN_1.txt");
    CreateFile("MAL_1.txt", fileSize, fileHandle);
    until(comienzaReg);
    while(!ButtonPressed(BTNLEFT,true)){
         text = NumToStr(effort_A)+", "+NumToStr(effort_B);
         WriteLnString(fileHandle,text,bytesWritten);
         //Wait(15);
         Wait(50);
    }
    PlaySound(1);
    WriteLnString(fileHandle,"F I N", bytesWritten);
    CloseFile(fileHandle);
    RenameFile("MAL_1.txt","BIEN_1.txt");
}

task compass(){
   anguloInicial = SensorHTCompass(CS);
   while(true){
       anguloReal = SensorHTCompass(CS);
       anguloSig = abs(anguloReal - anguloInicial);
       /*
       if(abs(angulo - anguloSig) >= 2){
           seg = 0;
       }
       if(seg >= 5){
           error = true;
           PlaySound(1);
       }*/
       if((angulo - anguloSig) < 5 || (angulo - anguloSig) > 70){
           angulo = anguloSig;
       }
       Wait(10);
   }
}

task timer(){
     while(1){
         until(runningTime);
         t0 = CurrentTick();
         tiempo = CurrentTick()-t0;
         while(tiempo < duracion){
             tiempo = CurrentTick()-t0;
         }
         runningTime = false;
     }
}

task main(){
     PlaySound(5);
     SetSensorLowspeed(CS);
     SetSensorLight(IN_1);
     SetSensorLight(IN_2);
     SetSensorLight(IN_3);
     conexion(BT_CONN);
     Precedes(compass,move,timer,errorManager,cronometro);
}

sub slaveSwitch(){
      switch(in){
          case "Presion":    STOP
                             TSR = 1;
                             TSL = 1;
                             break;
          case "NoPresion":  if(LSC > HUECO || nPared == 0){
                                 FWD_A(70);
                                 FWD_B(55);
                                 checkTapeError();
                             }
                             if(LSC < HUECO && nPared > 0){
                                 FWD_A(40);
                                 FWD_B(57);
                                 checkTapeError();
                             }
                             TSR = 0;
                             TSL = 0;
                             break;
          case "Negro":      STOP
                             FWD_A(70);
			                       FWD_B(70);
                             Wait(250);
                             checkTapeError();
                             break;
          case "Blanco":     if(!full){
                                 STOP
                                 canasta++;
                                 PlaySound(5);
                                 RotateMotor(OUT_C,100,-600);       // Baja el gancho
                                 DELAY
                                 runTime(1000);
                                 while(runningTime == true && TSL == 0 && TSR == 0){
                                     FWD(50);
                                     checkTapeError();
                                 }
                                 STOP
                                 if(TSL == 1 || TSR == 1){
                                     pendiente = true;
                                 }else{
                                     RotateMotor(OUT_C,80,1200);    // Sube H
                                     DELAY
                                     RotateMotor(OUT_C,100,-350);   // Baja gancho
                                     pendiente = false;
                                 }
                                 STOP
                             }
                             break;
          default:           break;
      }
}

sub regresaBase(){
     switch(nPared){
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          default:while(full){
                      ReceiveRemoteString(INBOX,true,in);
                      slaveSwitch();
                      if(TSR == 1 && TSL == 1){
                          rutinaDeGiro(65,68);
                      }
                      if(nPared == 4 && LSC < HUECO){
                          STOP
                          while(FSR < PM){
                              FWD_A(60);
                              FWD_B(50);
                          }
                          STOP
                          while(FSL < PM){
                              FWD_A(60);
                              Off(OUT_B);
                          }
                          STOP
                          SendRemoteString(BT_CONN,OUTBOX,"Tiralos");
                          DELAY
                          SendRemoteString(BT_CONN,OUTBOX,"");
                      }
                  }
                  break;
     }
}

sub rutinaDeGiro(int aMenor, int aMayor){
     STOP
     anguloInicial = SensorHTCompass(CS);
     Wait(200);
     TSR = 0;
     TSL = 0;
     nPared++;
     //WriteLnString(fileHandle,"PARED", bytesWritten);
     RotateMotor(OUT_A,100,250);
     //STOP
     while(angulo < aMenor || angulo > aMayor){
         FWD_B(90);
         REV_A(90);
     }
     STOP
     FWD(60);
     Wait(500);
     if(!full) {subeHumanoidePendiente();}
}

sub inicializacion(){
    while(FSL < PM || FSR < PM){
        if(FSL < PM){
            FWD_A(50);
            Off(OUT_B);
            Wait(50);
        }
        if(FSR < PM){
            FWD_B(50);
            Off(OUT_A);
            Wait(50);
        }
    }
    STOP
    anguloInicial = SensorHTCompass(CS);
    Wait(100);
    FWD(60);
    Wait(1800);
    STOP
    if(robotAzul){
        while(angulo < 92 || angulo > 95){
            FWD_A(65);
            REV_B(65);
        }
    }else{
        while(angulo < 255 || angulo > 258){
            FWD_A(65);
            REV_B(65);
        }
    }
    STOP
    nPared = 0;
}

sub checkTapeError(){
    if(FSR < PM){
        STOP
        PlaySound(1);
        REV(50);  Wait(500);
        FWD_B(50);
        Wait(350);
    }
}

sub subeHumanoidePendiente(){
     if(pendiente){
         FWD(60);                       // Lo mete
         Wait(500);
         RotateMotor(OUT_C,80,1200);    // Lo sube
         DELAY
         RotateMotor(OUT_C,100,-350);   // Regresa
         pendiente = false;
     }
}

sub runTime(int t){
    duracion = t;
    runningTime = true;
}

sub conexion(int conn){
   if (!BluetoothStatus(conn)==NO_ERR){
        TextOut(5,LCD_LINE2,"   Error");
        TextOut(5,LCD_LINE4,"de Bluetooth");
        Wait(2000);
        Stop(true);
   }
}


